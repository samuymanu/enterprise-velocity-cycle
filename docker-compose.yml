# üê≥ DOCKER COMPOSE ENTERPRISE - DESARROLLO
# Configuraci√≥n completa para entorno de desarrollo

version: '3.8'

# Red personalizada para mejor aislamiento
networks:
  bikeshop-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Vol√∫menes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

services:
  # ================================
  # DATABASE: PostgreSQL
  # ================================
  postgres:
    image: postgres:16-alpine
    container_name: bikeshop-postgres
    restart: unless-stopped
    networks:
      - bikeshop-network
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-bikeshop_db}
      POSTGRES_USER: ${DATABASE_USER:-bikeshop_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-bikeshop_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-bikeshop_user} -d ${DATABASE_NAME:-bikeshop_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ================================
  # CACHE: Redis
  # ================================
  redis:
    image: redis:7-alpine
    container_name: bikeshop-redis
    restart: unless-stopped
    networks:
      - bikeshop-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ================================
  # BACKEND: Node.js + Express
  # ================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: bikeshop-backend
    restart: unless-stopped
    networks:
      - bikeshop-network
    environment:
      # Base
      NODE_ENV: development
      PORT: 3001
      LOG_LEVEL: debug

      # Database
      DATABASE_URL: postgresql://${DATABASE_USER:-bikeshop_user}:${DATABASE_PASSWORD:-bikeshop_password}@postgres:5432/${DATABASE_NAME:-bikeshop_db}?schema=public

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379

      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-here}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}

      # File uploads
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-10485760}
      UPLOAD_ALLOWED_TYPES: ${UPLOAD_ALLOWED_TYPES:-image/jpeg,image/png,image/webp}

      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173,http://localhost:3000}

      # Rate limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - ./backend/src:/app/src:ro
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # ================================
  # FRONTEND: Vite + React
  # ================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bikeshop-frontend
    restart: unless-stopped
    networks:
      - bikeshop-network
    environment:
      - VITE_API_URL=http://localhost:3001/api
      - VITE_APP_NAME=BikeShop ERP
      - VITE_APP_VERSION=1.0.0
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ================================
  # MONITORING: Adminer (DB Admin)
  # ================================
  adminer:
    image: adminer:4.8.1
    container_name: bikeshop-adminer
    restart: unless-stopped
    networks:
      - bikeshop-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy

  # ================================
  # MONITORING: Redis Commander
  # ================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: bikeshop-redis-commander
    restart: unless-stopped
    networks:
      - bikeshop-network
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-redis_password}
      HTTP_USER: admin
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      redis:
        condition: service_healthy
